<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	SQL 명령 보관 파일
	외부에서 접근할 수 있도록 namespace 지정할 것
 -->
 
 <mapper namespace="member">
 	
 	<!-- 회원가입 regist(등록) -->
 	<insert id="regist" parameterType="memberDto">
 		insert into member values(member_seq.nextval, null, #{id}, #{pw}, #{email}, #{phone}, 
 				#{post}, #{basic_addr}, #{detail_addr}, '일반', '고객','일반', sysdate, sysdate, sysdate, 0, '고객', #{email_address}, null)
 	</insert>
 	
 	<!-- 아이디 중복확인 id_check(조회) -->
 	<select id="id_check" parameterType="String" resultType="memberDto">
 		select * from member where id=#{id}
 	</select>
 	
 	<!-- 비밀번호 암호화 적용 전 로그인 -->
 	<select id="login" parameterType="memberDto" resultType="memberDto">
 		select * from member where id = #{id} and pw = #{pw}
 	</select>
 	
 	<!-- 비밀번호 암호화 적용 후 로그인 -->
 	<select id="get" parameterType="String" resultType="memberDto">
 		select * from member where id = #{id}
 	</select>
 	
 	<!-- 아이디 찾기 -->
 	<select id="findId" parameterType="memberDto" resultType="memberdto">
 		select * from member where email = #{email} and email_address = #{email_address}
 	</select>
 	
 	<!-- 비밀번호 찾기 -->
 	<select id="findPw" parameterType="memberDto" resultType="memberDto">
 		select * from member where id = #{id} and email = #{email} and email_address = #{email_address}
 	</select>
 	
 	<!-- 비밀번호 변경 -->
 	<update id="changPw" parameterType="memberDto">
 		update member set pw = #{pw} where id = #{id}
 	</update>
 	
 	<!-- 회원정보 수정 전 신원확인 -->
 	<select id="take" parameterType="int" resultType="memberDto">
 		select * from member where no = #{no}
 	</select>
 	
 	<!-- 회원 정보 수정 -->
 	<update id="change" parameterType="memberDto">
 		update member set 
 		<if test="pw != null">
 		pw = #{pw},
 		</if>
 		email = #{email}, phone = #{phone}, post = #{post}, 
 				basic_addr = #{basic_addr}, detail_addr = #{detail_addr} where no = #{no}
 	</update>
 	
 	<!-- 회원 탈퇴 -->
 	<delete id="member_delete" parameterType="memberDto">
 		delete member where no = #{no}
 	</delete>
 	
 	<!-- 회원정보 조회(회원코드로) -->
 	<select id="get_info" parameterType="int" resultType="memberDto">
 		select * from member where no=#{member_code}
 	</select>
 	
 	<!-- 관리자 회원 검색하는 기능-->
 	<select id="search" parameterType="map" resultType="memberInfoVO">
<!--  		select * from ( -->
<!-- 			select  -->
<!-- 				M.no, M.id, M.email, M.email_address, M.post, M.basic_addr, M.detail_addr,  -->
<!--        		 	M.grade, M.status, M.regist_date, M.latest_login, M.point, -->
<!-- 				count(I.member_code), count(O.no), count(R.no) -->
<!-- 			from -->
<!-- 				Member M -->
<!-- 				inner join Issue I on M.no = I.member_code -->
<!-- 				inner join Oneandone O on M.no = O.member_code -->
<!-- 				inner join Review R on M.no = R.member_code -->
<!-- 			group by -->
<!-- 				M.no, M.id, M.email, M.email_address, M.post, M.basic_addr, M.detail_addr,  -->
<!--         		M.grade, M.status, M.regist_date, M.latest_login, M.point -->
<!-- 		) where id = #{id} -->

<!-- 		select -->
<!-- 			 M.no, M.id, M.status, M.grade, M.phone, M.point, M.regist_date, count(I.coupon_code) coupon  -->
<!-- 		from  -->
<!-- 			member M left outer join issue I on M.no = I.member_code -->
<!-- 		where  -->
<!-- 			1=1 -->
 			<!-- 주석 -->
<!-- 				회원 상태 -->
<!-- 				회원상태가 전체일 때는 할게 없음  -->
<!-- 				회원상태가 일반이면 일반 조건을 설정 -->
<!-- 				회원상태가 블랙이면 블랙 조건을 설정 -->
<!-- 				회원상태가 탈퇴이면 탈퇴 조건을 설정 -->
<!-- 			 --> 
<!-- 			<if test="status != null and status != '전체'"> -->
<!-- 				and status = #{status} -->
<!-- 			</if> -->
 			<!-- 회원 등급 -->
<!-- 			<if test="grade != null and grade != '전체'"> -->
<!-- 				and grade = #{grade} -->
<!-- 			</if> -->
 			<!-- 기간 검색 --> 
<!-- 			<if test="start_date != null and start_date != '' and end_date != null and end_date != ''"> -->
<!-- 				and regist_date between to_date(#{start_date}, 'YYYY-MM-DD') and to_date(#{end_date}, 'YYYY-MM-DD') + 1 - 1 / 864000  -->
<!-- 			</if> -->
<!-- 			<if test="type != null and type != '전체' and keyword != null and keyword != ''"> -->
<!-- 				and ${type} like '%'||#{keyword}||'%' -->
<!-- 			</if> -->
<!-- 		group by M.no, M.id, M.status, M.grade, M.phone, M.point, M.regist_date -->

		select 
		    MP.member_code, sum(subtotal) point
		    ,M.no, M.id, M.email, M.email_address, M.phone, M.post, M.basic_addr, M.detail_addr, M.grade, M.status, M.regist_date
		    ,(select count(*) from issue where member_code = M.no) coupon
		    ,(select count(*) from oneandone where member_code = M.no) ono
		    ,(select count(*) from review where member_code = M.no) review
		from (
		      select 
		          P.member_code, decode(P.use_yn, '사용', -1, '적립', +1) * P.point subtotal
		      from 
		          point_detail P
		) MP
		    inner join Member M on M.no = MP.member_code
		    left outer join Review R on M.no = R.member_code
<!-- 		where M.no = #{no} -->
		where 
			1=1
			<!-- 
				회원 상태
				회원상태가 전체일 때는 할게 없음 
				회원상태가 일반이면 일반 조건을 설정
				회원상태가 블랙이면 블랙 조건을 설정
				회원상태가 탈퇴이면 탈퇴 조건을 설정
			 -->
			<if test="status != null and status != '전체'">
				and status = #{status}
			</if>
			<!-- 회원 등급 -->
			<if test="grade != null and grade != '전체'">
				and grade = #{grade}
			</if>
			<!-- 기간 검색 -->
			<if test="start_date != null and start_date != '' and end_date != null and end_date != ''">
				and regist_date between to_date(#{start_date}, 'YYYY-MM-DD') and to_date(#{end_date}, 'YYYY-MM-DD') + 1 - 1 / 864000 
			</if>
			<if test="type != null and type != '전체' and keyword != null and keyword != ''">
				and ${type} like '%'||#{keyword}||'%'
			</if>
		group by MP.member_code
		, M.no, M.id, M.email, M.email_address, M.phone, M.post, M.basic_addr, M.detail_addr, M.grade, M.status, M.regist_date
		order by MP.member_code asc
		
 	</select>
 	
 	<!-- 관리자 회원 목록 상세보기 -->
 	<select id="info" parameterType="int" resultType="memberInfoVO">
<!--  		select -->
<!--  			M.no, M.id, M.email, M.email_address, M.phone, M.post, M.basic_addr, M.detail_addr, M.grade, M.status,  -->
<!--  			count(I.coupon_code) coupon, count(O.no) ono, count(R.no) review, -->
<!--  			M.regist_date, M.latest_login -->
<!--  		from -->
<!--  			Member M  -->
<!--  				left outer join Issue I on M.no = I.member_code -->
<!--  				left outer join Oneandone O on M.no = O.member_code -->
<!--  				left outer join Review R on M.no = R.member_code -->
<!--  		where M.no = #{no} -->
<!--  		group by -->
<!--  			M.no, M.id, M.email, M.email_address, M.phone, M.post, M.basic_addr, M.detail_addr, M.grade, M.status, M.regist_date, M.latest_login -->
<!--  		order by no desc -->
 		
 		<!-- 강사님의 피땀눈물 구문(포인트도 보여줄려고 했는데....) -->
		select 
		    MP.member_code, sum(subtotal) point
		    ,M.no, M.id, M.email, M.email_address, M.phone, M.post, M.basic_addr, M.detail_addr
		    ,M.grade, M.status, M.regist_date, M.latest_login
		    ,(select count(*) from issue where member_code = M.no) coupon
		    ,(select count(*) from oneandone where member_code = M.no) ono
		    ,(select count(*) from review where member_code = M.no) review
		    from (
		        select 
		            P.member_code, decode(P.use_yn, '사용', -1, '적립', +1) * P.point subtotal
		        from 
		            point_detail P
		    ) MP
		    inner join Member M on M.no = MP.member_code
		    left outer join Review R on M.no = R.member_code
		where M.no = #{no}
		group by MP.member_code
		, M.no, M.id, M.email, M.email_address, M.phone, M.post, M.basic_addr, M.detail_addr, M.grade, M.status, M.regist_date, M.latest_login
		order by MP.member_code asc
 	</select>
 	
 	<!-- 관리자 회원 탈퇴 기능 -->
 	<delete id="delete" parameterType="memberDto">
 		delete member where no = #{no}
 	</delete>
 	
 	<!-- 관리자 회원 정보 수정 -->
 	<update id="edit" parameterType="memberInfoVO">
 		update member set email = #{email}, email_address = #{email_address}, phone = #{phone}, 
 		post = #{post}, basic_addr = #{basic_addr}, detail_addr = #{detail_addr}, reason = #{reason}
 	</update>
 	
 	<!-- 관리자 회원 정보 총 사용금액 구하기 -->
 	<select id="total_price" parameterType="memberInfoVO" resultType="int">
 		select 
 			(select sum(total_price) from orders where member_code = #{no})
 		-
 			(select sum(discount_price) from orders where member_code = #{no})
 		as total_price
 		from dual
 	</select>
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	

	<!-- 찜한매장 등록 -->
 	<insert id="like" parameterType="memberDto">
 		insert into myshop values(myshop_seq.next,#{member_code},#{shop_code},sysdate)
 	</insert>
 	<!-- 찜한매장 제거 -->
 	<delete id="unlike" parameterType="memberDto">
 		delete myshop where member_code = #{member_code} and shop_code = #{shop_code}
 	</delete>
 	
	
	<!-- 회원등급 정보 -->
	<select id="usergrade" resultType="usergradeDto">
		select * from usergrade
	</select>
	
	<!-- 회원등급 내용 변경 -->
	<update id="usergrade_edit1" parameterType="map">
		update usergrade set 
		name = #{name},
		min_order = #{min_order}
		where grade = #{grade}
	</update>
	<update id="usergrade_edit2" parameterType="map">
		update usergrade set 
		name = #{name},
		min_order = #{min_order},
		max_order = #{max_order}
		where grade = #{grade}
	</update>
	<update id="usergrade_edit3" parameterType="map">
		update usergrade set 
		name = #{name},
		max_order = #{max_order}
		where grade = #{grade}
	</update>
	
	<!-- 회원등급 변경 -->
	<update id="update" parameterType="map">
		update member set grade = #{grade} where no=#{no}
	</update>
	<!-- 회원번호 조회 -->
	<select id="member_code" resultType="memberDto">
		select no from member
	</select>
	
	<select id="myshop" resultType="myshopDto" parameterType="map">
		select * from myshop where member_code = #{member_code}
	</select>
	
	<!-- super_admin 회원전체목록 조회 -->
	<select id="get_member_list" resultType="memberDto">
		select * from member order by no desc
	</select>
	
 </mapper>
