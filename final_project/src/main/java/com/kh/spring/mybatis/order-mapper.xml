<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="order">
	<!-- 회원 정보를 확인하는 코드 -->
	<select id="search" parameterType="int" resultType="memberDto">
		select * from member where no = #{member_code}
	</select>
	<!-- 장바구니에 그냥 접속시 샵번호를 불러오는 코드 -->
	<select id="cart" parameterType="int" resultType="int">
		select distinct nvl(shop_code, 0) as shop_code from cart where member_code = #{member_code}
	</select>
	<!-- 장바구니 시퀀스 받아오는 코드 -->
	<select id="getcartseq" resultType="int">
		select cart_seq.nextval from dual
	</select>
	<!-- 장바구니에 메인메뉴를 넣는 코드 -->
	<insert id="cartmenuinsert" parameterType="cartDto">
	 	insert into cart values(#{no},#{member_code},#{shop_code},#{title},#{menu_name},#{menu_amount},
	 	#{menu_price},sysdate)
	</insert>
	<!-- 주문시 받아온 번호로 서브메뉴를 조회하는 코드 -->
	<select id="getsubmenu" parameterType="map" resultType="submenuDto">
		select * from sub_menu where shop_code = #{shop_code} and no = #{no}
	</select>
	<!-- 주문 입력 코드 -->
	<insert id="subinsert" parameterType="submenuDto">
		insert into cart_sub_menu values(#{no},#{type},#{title},#{name},#{price},1)
	</insert>
	<!-- '자기'의 카트에 존재하는 메인 메뉴의 코드를 출력하는 코드 -->
	
	<resultMap type="cartDto" id="cartlist">
		<result property="no" column="no"/>
		<result property="member_code" column="member_code"/>
		<result property="shop_code" column="shop_code"/>
		<result property="title" column="title"/>
		<result property="menu_name" column="menu_name"/>
		<result property="menu_amount" column="menu_amount"/>
		<result property="menu_price" column="menu_price"/>
		<result property="regist_date" column="regist_date"/>
		<collection property="list" column="no" javaType="java.util.ArrayList" ofType="cartSubDto"
		select="cartSubList"/>
	</resultMap>
		<!-- '자기'의 카트에 존재하는 물건을 출력하는 코드  -->
	<select id="cartlist" parameterType="int" resultMap="cartlist">
		select * from cart where member_code = #{member_code}
	</select>
	<!-- '자신'의 카트에 존재하는 물건의 추가메뉴를 출력하는 코드 -->
	<select id="cartSubList" resultType="cartSubDto">
		select * from cart_sub_menu where no = #{no}
	</select>
	<!-- '자신'의 카트에 존재하는 물건에 딸린 매장을 검색하는 코드 -->
	<select id="cartshop" parameterType="int" resultType="shopDto">
		select * from shop where no = #{shop_code}
	</select>
	<!-- 결제가 완료되면 카트를 지움 -->
	<delete id="delete" parameterType="int">
		delete cart where member_code = #{member_code}
	</delete>
	<!-- 카트에 있는 정보를 수정해서 주문에 넣음 -->
	<update id="update" parameterType="cartDto">
		update cart set menu_amount = ${menu_amount},
		menu_price = ${menu_price}
		where no = ${no}
	</update>
	<!-- 장바구니 개별 지우기 -->
	<delete id="cartinnerDelete" parameterType="int">
		delete cart where no = #{no}
	</delete>

	<!-- 나의정보 주문내역 -->
	<select id="my_order_list" parameterType="int" resultType="ordersDto">
		select * from orders where member_code=#{member_code} order by no desc
	</select>
	
	<!-- 나의정보 주문메뉴명 1개 -->
	<select id="menu_name" parameterType="int" resultType="orderDetailDto">
		select * from
		    (select rownum rn, TMP.* from 
		        (select menu_name from order_detail where order_code=${no})TMP
		    )
		where rn=1
	</select>
	
	<!-- 주문정보 distinct -->
	<select id="order_distinct" parameterType="int" resultType="orderDetailDto">
		select distinct menu_name, menu_amount, menu_price from order_detail where order_code=#{no}
	</select>
	
	<!-- 나의정보 주문메뉴갯수 -->
	<select id="menu_count" parameterType="int" resultType="int">
		select count(menu_name) from order_detail where order_code=#{no}
	</select>
	
	<resultMap type="orderDetailDto" id="my_order_detail">
		<result property="order_code" column="order_code"/>
		<result property="no" column="no"/>
		<result property="title" column="title"/>
		<result property="menu_name" column="menu_name"/>
		<result property="menu_amount" column="menu_amount"/>
		<result property="menu_price" column="menu_price"/>
		<collection property="list" column="no" javaType="java.util.ArrayList" ofType="orderSubDetail"
		select="my_order_sub_detail"/>
	</resultMap>
	
	<!-- 나의정보 주문상세 -->
	<select id="my_order_detail" parameterType="int" resultMap="my_order_detail">
		select * from order_detail 
			where 
		order_code = #{order_code}
	</select>
	<!-- 나의정보 추가메뉴 주문 상세 -->
	<select id="my_order_sub_detail"  resultType="orderSubDetail">
		select * from order_sub_detail where no = #{no}
	</select>
	<!-- 나의주문정보조회 -->
	<select id="order_info" parameterType="int" resultType="ordersDto">
		select * from orders 
			where 
		no = #{order_code}
	</select>	
	<!-- 주문 번호 미리 구하기 -->
	<select id="order_seq" resultType="int">
		select orders_seq.nextval from dual
	</select>
	<!-- 주문 상세 번호 미리 구하기 -->
	<select id="order_det_seq" resultType="int">
		select order_det_seq.nextval from dual
	</select>
	<!-- 주문 내용 등록 -->
	<insert id="order_regist" parameterType="ordersDto">
		insert into orders values(${no}, #{member_code},#{shop_code},#{total_price},
		'접수대기',#{discount_price},#{pay_method},#{request},sysdate,'미작성')
	</insert>
	
	<!-- 주문 상세 등록 -->
	<insert id="detail_regist" parameterType="orderDetailDto">
		insert into order_detail values(#{order_code},#{no}, #{title}, #{menu_name}, #{menu_amount},
		#{menu_price})
	</insert>
	<!-- 주문 상세 추가메뉴 등록 -->
	<insert id="detail_sub_regist" parameterType="orderSubDetail">
		insert into order_sub_detail values(order_sub_seq.nextval,#{no},#{sub_type},#{sub_title},#{sub_name},#{sub_price},#{sub_amount})
	</insert>
	<!-- 장바구니 갯수 확인 -->
	<select id="quantity" parameterType="int" resultType="int">
		select count(*) from cart where member_code = #{member_code}
	</select>
	<!-- 주문 확인시 보여줄 코드 -->
	<select id="order_result" parameterType="int" resultType="ordersDto">
		select * from orders where no = #{no}
	</select>	
	
	<!-- 1달간 회원의 주문내역 -->
	<select id="month_list" parameterType="map" resultType="int">
		SELECT count(*) FROM (select * from orders where member_code=#{member_code}) 
		where ORDER_DATE between (SELECT ADD_MONTHS(SYSDATE, -1)FROM DUAL)  and sysdate
	</select>
	
	<select id="order_data" resultType="orderVo">
	<![CDATA[
		SELECT ROWNUM
    	 , X.*
  		FROM ( 
		SELECT TO_CHAR(order_date, 'yy') t1,TO_CHAR(order_date, 'mm') 
		t2,TO_CHAR(order_date, 'dd') t3,count(*) cut from 
		]]>
		<choose>
			<when test="no != null">
				(select * from orders where shop_code = #{shop_code})
			</when>
			<otherwise>
				orders 
			</otherwise>		
		</choose> 
		<![CDATA[
		GROUP BY  (TO_CHAR(order_date, 'yy') ,TO_CHAR(order_date, 'mm') ,
		TO_CHAR(order_date, 'dd')) HAVING COUNT(TO_CHAR(order_date, 'yy')) >= 1
		ORDER BY TO_CHAR(order_date, 'yy') ,TO_CHAR(order_date, 'mm') ,TO_CHAR(order_date, 'dd') aSC
		) X
	]]>
	</select>
	<select id="cancel_data" resultType="int" parameterType="map">
	<![CDATA[
		select count(*) from 
		]]>
		<choose>
			<when test="no != null">
				(select * from orders where shop_code = #{shop_code})
			</when>
			<otherwise>
				orders 
			</otherwise>		
		</choose> 
		<![CDATA[
		where order_date like #{order_date} and ORDER_STATUS = '취소완료'
	]]>
	</select>
	
	<select id="sussce_data" resultType="int" parameterType="map">
	<![CDATA[
		select count(*) from 
		]]>
		<choose>
			<when test="no != null">
				(select * from orders where shop_code = #{shop_code})
			</when>
			<otherwise>
				orders 
			</otherwise>		
		</choose> 
		<![CDATA[ 
		where order_date like #{order_date} and ORDER_STATUS = '배달완료'
	]]>
	</select>
	<select id="date_day" resultType="orderVo" parameterType="map">
	<![CDATA[
		SELECT ROWNUM
    	 , X.*
  		FROM ( 
		SELECT TO_CHAR(order_date, 'yy') t1,TO_CHAR(order_date, 'mm') 
		t2,TO_CHAR(order_date, 'dd') t3,count(*) cut from 
		(select * from 
		]]>
		<choose>
			<when test="no != null">
				(select * from orders where shop_code = #{shop_code})
			</when>
			<otherwise>
				orders 
			</otherwise>		
		</choose> 
		<![CDATA[
		where ORDER_DATE between 
		to_date(#{start}) and to_date(#{end})) 
		GROUP BY  (TO_CHAR(order_date, 'yy') ,TO_CHAR(order_date, 'mm') ,
		TO_CHAR(order_date, 'dd')) HAVING COUNT(TO_CHAR(order_date, 'yy')) >= 1
		ORDER BY TO_CHAR(order_date, 'yy') aSC
		) X
	]]>
	</select>
	<select id="total" resultType="totalVo">
	<![CDATA[
	SELECT ROWNUM
    	 , X.*
  		FROM ( 
		select TO_CHAR(order_date, 'yy') t1,TO_CHAR(order_date, 'mm') t2,
		TO_CHAR(order_date, 'dd') t3,sum(TOTAL_PRICE) tot from	
		]]>
		<choose>
			<when test="no != null">
				(select * from orders where shop_code = #{shop_code})
			</when>
			<otherwise>
				orders 
			</otherwise>		
		</choose> 
		<![CDATA[
		GROUP BY ROLLUP(TO_CHAR(order_date, 'yy') ,TO_CHAR(order_date, 'mm') ,TO_CHAR(order_date, 'dd'))
		HAVING GROUPING_ID(TO_CHAR(order_date, 'yy') ,TO_CHAR(order_date, 'mm') ,TO_CHAR(order_date, 'dd')) IN (0, 4) 
		ORDER BY TO_CHAR(order_date, 'yy') aSC
	) X
		]]>
	</select>
	
	<select id="total_date" resultType="totalVo" parameterType="map">
	<![CDATA[
	SELECT ROWNUM
    	 , X.*
  		FROM ( 
		select TO_CHAR(order_date, 'yy') t1,TO_CHAR(order_date, 'mm') t2,
		TO_CHAR(order_date, 'dd') t3,sum(TOTAL_PRICE) tot from	
		(select * from 
		]]>
		<choose>
			<when test="no != null">
				(select * from orders where shop_code = #{shop_code})
			</when>
			<otherwise>
				orders 
			</otherwise>		
		</choose> 
		<![CDATA[
		where ORDER_DATE between 
		to_date(#{start}, 'yy-mm-dd') and to_date(#{end}, 'yy-mm-dd')) 
		GROUP BY ROLLUP(TO_CHAR(order_date, 'yy') ,TO_CHAR(order_date, 'mm') ,TO_CHAR(order_date, 'dd'))
		HAVING GROUPING_ID(TO_CHAR(order_date, 'yy') ,TO_CHAR(order_date, 'mm') ,TO_CHAR(order_date, 'dd')) IN (0, 4) 
		ORDER BY TO_CHAR(order_date, 'yy') aSC
	) X
		]]>
	</select>
	<!-- 이 밑으로 슈퍼 관리자용 -->
	<!-- 주문 리스트를 불러오는 코드 -->
	<select id="ordersList" parameterType="map" resultType="orderListVo">
		<![CDATA[
		select * from 
		(select rownum rn,A.*from(
		select DISTINCT * from order_list
		]]>
		<if test="status !='all'">
		<choose>
			<when test="type !=null and keyword != null and status ==''">
				where ${type} like '%'||#{keyword}||'%'
			</when>
			<when test="status !=null and type =='' and keyword == ''">
				where order_status = #{status}
			</when>
			<when test="status !=null and type !=null and keyword != null">
				where ${type} like '%'||#{keyword}||'%' and order_status = #{status}
			</when>
			<otherwise>
			</otherwise>
		</choose>
		</if>
		<![CDATA[
		order by no desc
		)A)where rn >= #{start} and rn <=#{end}
		]]> 
	</select>
	<!-- 주문 갯수를 불러오는 코드 -->
	<select id="ordersCount" resultType="int">
		<![CDATA[
		select count(*) from order_list	
		]]>
			<if test="status !='all'">
			<choose>
			<when test="type !=null and keyword != null and status ==''">
				where ${type} like '%'||#{keyword}||'%'
			</when>
			<when test="status !=null and type =='' and keyword == ''">
				where order_status = #{status}
			</when>
			<when test="status !=null and type != null and keyword != null">
				where ${type} like '%'||#{keyword}||'%' and order_status = #{status}
			</when>
			<otherwise> 
			</otherwise>
		</choose>
			</if>
	</select>	
	<!-- 점주 주문 리스트를 불러오는 코드 -->
	<select id="shopordersList" parameterType="map" resultType="orderListVo">
		<![CDATA[
		select * from 
		(select rownum rn,A.*from(
		select DISTINCT * from shop_order_list where shop_code = #{shop_code}
		]]>
		<if test="status !='all'">
		<choose>
			<when test="type !=null and keyword != null and status ==''">
				and ${type} like '%'||#{keyword}||'%'
			</when>
			<when test="status !=null and type =='' and keyword == ''">
				and order_status = #{status}
			</when>
			<when test="status !=null and type !=null and keyword != null">
				and ${type} like '%'||#{keyword}||'%' and order_status = #{status}
			</when>
			<otherwise>
			</otherwise>
		</choose>
		</if>
		<![CDATA[
		order by no desc
		)A)where rn >= #{start} and rn <=#{end}
		]]> 
	</select>
	<!-- 매장 주인의 주문 개수를 불러오는 코드 -->
	<select id="shopOrdersCount" parameterType="int" resultType="int">
	<![CDATA[
		select count(*) from shop_order_list where shop_code = #{shop_code}
			]]> 
			<if test="status !='all'">
			<choose>
			<when test="type !=null and keyword != null and status ==''">
				and ${type} like '%'||#{keyword}||'%' 
			</when>
			<when test="status !=null and type =='' and keyword == ''">
				and order_status = #{status} and shop_code = #{shop_code}
			</when>
			<when test="status !=null and type != null and keyword != null">
				and ${type} like '%'||#{keyword}||'%' and order_status = #{status} 
			</when>
			<otherwise> 
			</otherwise>
		</choose>
			</if>
	</select>
	<!-- 매장 점주가 주문 확인시 보여줄 코드 -->
	<select id="shop_order_result" parameterType="map" resultType="ordersDto">
		select * from orders where no = #{no} and shop_code = #{shop_code}
	</select>	
	<!-- 관리자가 주문 정보를 개별로 불러오는 코드 -->
	
	<resultMap type="orderDetailDto" id="orderDetail">
		<result property="order_code" column="order_code"/>
		<result property="no" column="no"/>
		<result property="title" column="title"/>
		<result property="menu_name" column="menu_name"/>
		<result property="menu_amount" column="menu_amount"/>
		<result property="menu_price" column="menu_price"/>
		<collection property="list" column="no" javaType="java.util.ArrayList" ofType="orderSubDetail"
		select="ordersubdetail"/>
	</resultMap>
	<select id="orderDetail" parameterType="int" resultMap="orderDetail">
		select * from order_detail where order_code = #{no}
	</select>
	<select id="ordersubdetail" resultType="orderSubDetail">
		select * from order_sub_detail where no = #{no}
	</select>
	<!-- 주문 번호에 딸린 멤버 정보를 불러오는 코드 -->
	<select id="orderMember" parameterType="int" resultType="memberDto">
		select * from member where no = (select member_code from orders where no = #{no})
	</select>
	<!-- 주문 번호로 샵의 배달비를 불러오는 코드 -->
	<select id="shopDelivery" parameterType="int" resultType="ShopDto">
		select delivery_price from shop where no = (select shop_code from orders where no = #{no})
	</select>
	<!--  주문 상태 변경 -->
	<update id="setStatus" parameterType="map">
		update orders set order_status = #{order_status} where no = #{no}
	</update>
	<!-- 쿠폰 갯수 조회 -->
	<select id="getcoupon" parameterType="int" resultType="int">
		select count(*) from issue where member_code = #{member_code}
	</select>
	<!-- Shop_code로 매장별 주문내역 조회 -->
	<select id="getShopOrderList" parameterType="int" resultType="ordersDto">
		select * from orders where shop_code=#{shop_code}
	</select>
	<!-- member_code로 shop_code 조회 -->
	<select id="getshopcode" parameterType="int" resultType="int">
		select shop_code from member where no = #{member_code}
	</select>
	
	<select id="today" resultType="string">
	SELECT SYSDATE + 1 FROM DUAL
	</select>
	<select id="yesterday" resultType="string">
	SELECT SYSDATE - 1 FROM DUAL
	</select>
	<select id="month_ago" resultType="string">
	SELECT ADD_MONTHS(SYSDATE, -1) FROM DUAL
	</select>
	<select id="week_ago" resultType="string">
	SELECT SYSDATE - 7 FROM DUAL
	</select>
	<!-- 나의정보 주문취소 클릭시 -->
	<update id="orderCancel" parameterType="int">
		update orders set order_status = '취소완료' where no = #{order_code}
	</update>
	
	<select id="orderCount" parameterType="int" resultType="com.kh.spring.vo.OrderCountVO">
		select order_status, count(*) cnt from orders where shop_code = #{shop_code} group by order_status order by order_status asc
	</select>
	
	<!-- member_code로 point 조회 -->
	<select id="getpoint" parameterType="int" resultType="pointDetailDto">
		select * from point_detail where member_code = #{member_code} and use_yn = '적립'
	</select>
	<!-- point 사용시 처리 -->
	<insert id="usepoint" parameterType="map">
		insert into point_detail values(#{member_code},'사용',#{point},sysdate,null)
	</insert>
</mapper>